import numpy as np

def question_1(N):
    """

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
    """
    sums = 0
    for i in range(1,N):
        if i % 9 != 0:
            if i % 6 != 0:
                if i % 3 == 0:
                    sums += i
                else:
                    if i % 5 == 0 :
                        sums += i
            else:
                sums += i
        else:
            sums += i
    ans = sums
    return ans

def question_2a(N):
    """
<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>
<p class="center">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
    """
    def iseven(value):
        if value % 2 == 0:
            return True
        else:
            return False
        
    fibonacci_list = [1,2]
    
    def generate_fib_value(array=fibonacci_list):
        new_val = array[-1]+array[-2]
        return new_val
    
    def populate_array(N):
        while fibonacci_list[-1] < N:
            fibnum = generate_fib_value(fibonacci_list)
            if fibnum < N:
                fibonacci_list.append(fibnum)
            else:
                return "Done"
        else:
            return "Already bigger than given value"
        
    def calc_sum(array):
        sums = 0
        for val in array:
            if iseven(val):
                sums += val
        return sums
    #print("this is the original list: {}".format(fibonacci_list))
    populate_array(N)
    #print("The array has been updated: {}".format(fibonacci_list))
    print("The result of this question is: {}".format(calc_sum(fibonacci_list)))
def question_3(N):
    """
    Question 3
    """
    return None
